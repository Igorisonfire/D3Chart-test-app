{"version":3,"sources":["api/instance.ts","api/chart.api.ts","helpers/sortChartData.ts","features/chart/chartSlice.ts","img/button-loader.svg","components/button/index.tsx","components/input/index.tsx","components/datepicker/index.tsx","features/chart/ChartForm.tsx","features/chart/Chart.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","baseURL","responseType","ChartAPI","get","result","data","post","sortChartData","lineAvg","lineMax","lineMin","forEach","segment","value","avg","date","x","max","min","chartSlice","createSlice","name","initialState","lines","fetchingSend","reducers","setData","state","action","payload","setNewSegment","newData","setFetchingSend","actions","selectChartLines","chart","selectFetchingSend","Button","props","onClick","disabled","loading","className","type","src","loader","alt","Input","colour","onChange","join","trim","useInput","initialValue","useState","setValue","event","target","clear","DatePickerComponent","selected","minDate","Date","ChartForm","dispatch","useDispatch","useSelector","minInput","avgInput","maxInput","setSelected","useDatePicker","clearFields","buttonIsDisabled","Number","toISOString","a","console","log","setChartData","Chart","chartLines","d3Container","useRef","useEffect","response","current","dataMin","dataAvg","dataMax","margin","top","right","bottom","left","line","d3","defined","d","isNaN","y","curve","domain","range","nice","svg","attr","select","call","g","ticks","width","tickSizeOuter","clone","text","datum","transition","duration","height","ref","App","store","configureStore","reducer","chartReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a5d13d5.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const baseAPIUrl = 'https://konuxdata.getsandbox.com'\n\nexport const instance: any = axios.create({\n    baseURL: baseAPIUrl,\n    responseType: 'json'\n})","import {instance} from \"./instance\";\nimport IChart from '../models/chart.model'\n\ninterface IChartAPI {\n    getChartData(): Promise<IChart.Segment[]>\n    setChartData(data: IChart.Segment): Promise<void>\n}\n\nexport const ChartAPI: IChartAPI = {\n\n    async getChartData(): Promise<IChart.Segment[]> {\n        try {\n            const result = await instance.get('/values')\n            return result.data\n        } catch (error) {\n            throw error\n        }\n    },\n\n    async setChartData(data: IChart.Segment): Promise<void> {\n        try {\n            const result = await instance.post('/points', data)\n            return result.data\n        } catch (error) {\n            throw error\n        }\n    }\n}","import IChart from '../models/chart.model'\n\nexport const sortChartData = (data: IChart.Segment[]) => {\n    let lineAvg: IChart.Point[] = []\n    let lineMax: IChart.Point[] = []\n    let lineMin: IChart.Point[] = []\n\n    data.forEach((segment: IChart.Segment) => {\n        lineAvg = [\n            ...lineAvg,\n            {\n                value: segment.avg,\n                date: segment.x\n            }\n        ]\n        lineMax = [\n            ...lineMax,\n            {\n                value: segment.max,\n                date: segment.x\n            }\n        ]\n        lineMin = [\n            ...lineMin,\n            {\n                value: segment.min,\n                date: segment.x\n            }\n        ]\n    })\n\n    return {\n        avg: lineAvg,\n        max: lineMax,\n        min: lineMin\n    }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\nimport IChart from '../../models/chart.model'\r\nimport {ChartAPI} from '../../api/chart.api'\r\nimport {sortChartData} from '../../helpers/sortChartData'\r\n\r\nexport interface IChartState {\r\n  data: IChart.Segment[];\r\n  lines: IChart.Lines | null\r\n  fetchingSend: boolean\r\n}\r\n\r\nconst initialState: IChartState = {\r\n  data: [],\r\n  lines: null,\r\n  fetchingSend: false\r\n};\r\n\r\nexport const chartSlice = createSlice({\r\n  name: 'chart',\r\n  initialState,\r\n  reducers: {\r\n    setData: (state: IChartState, action: PayloadAction<IChart.Segment[]>) => {\r\n      const data = action.payload\r\n      const lines = sortChartData(data)\r\n\r\n      return {\r\n        ...state,\r\n        data,\r\n        lines\r\n      }\r\n    },\r\n    setNewSegment: (state: IChartState, action: PayloadAction<IChart.Segment>) => {\r\n      const newData = [action.payload, ...state.data]\r\n      const lines = sortChartData(newData)\r\n\r\n      return{\r\n        ...state,\r\n        data: newData,\r\n        lines\r\n      }\r\n    },\r\n    setFetchingSend: (state: IChartState, action: PayloadAction<boolean>) => {\r\n      return{\r\n        ...state,\r\n        fetchingSend: action.payload\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setData, setNewSegment, setFetchingSend } = chartSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const getChartData = (): AppThunk => async dispatch => {\r\n  try {\r\n    const response = await ChartAPI.getChartData()\r\n    await dispatch(setData(response))\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const setChartData = (data: IChart.Segment): AppThunk => async dispatch => {\r\n  try {\r\n    await dispatch(setFetchingSend(true))\r\n    await ChartAPI.setChartData(data)\r\n    await dispatch(setNewSegment(data))\r\n    await dispatch(setFetchingSend(false))\r\n  } catch (error) {\r\n    console.log(error)\r\n    await dispatch(setFetchingSend(false))\r\n  }\r\n}\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectChartData = (state: RootState) => state.chart.data;\r\nexport const selectChartLines = (state: RootState) => state.chart.lines;\r\nexport const selectFetchingSend = (state: RootState) => state.chart.fetchingSend;\r\n\r\nexport default chartSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/button-loader.44dbef48.svg\";","import * as React from 'react';\nimport './index.scss';\n\nimport loader from '../../img/button-loader.svg'\n\ninterface Props {\n  name: string;\n  onClick?(): void;\n  loading?: boolean;\n  disabled?: boolean\n}\n\nexport const Button = (props: Props) => {\n  const {name, onClick, disabled, loading} = props\n\n  return (\n      <button\n          disabled={disabled} onClick={onClick}\n          className={`button-component ${disabled ? \"disabled\" : ''} ${loading ? 'loading' : ''}`}\n          type={'button'}\n      >\n        {!loading && <span>{name}</span>}\n        {loading && <img src={loader} alt=\"load\" className={'loading'}/>}\n      </button>\n  )\n};\n\n","import * as React from 'react';\nimport \"./index.scss\";\nimport {useState} from 'react'\n\ninterface IProps {\n  colour?: string\n  type?: string,\n  name: string,\n  value: string;\n  onChange(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nexport const Input = (props: IProps) => {\n\n  const {colour, type, onChange, value, name} = props\n  const className = [\n    'input-component',\n    colour\n  ].join(' ').trim()\n\n  return(\n      <div className={className}>\n        <label>{name}</label>\n        <input type={type} value={value} onChange={onChange}/>\n      </div>\n  )\n}\n\nexport const useInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n\n  const clear = () => {\n    setValue('')\n  }\n\n  return{\n    value,\n    onChange,\n    clear\n  }\n}\n","import * as React from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nimport './index.scss'\nimport {useState} from 'react'\n\ninterface IProps {\n    name: string\n    selected: Date | null\n    onChange: (date: Date) => void\n}\n\nexport const DatePickerComponent = (props: IProps) => {\n    const {name, selected, onChange} = props\n\n    return(\n        <div className={'datepicker-custom-component'}>\n            <label>{name}</label>\n            <DatePicker\n                selected={selected}\n                onChange={onChange}\n                minDate={new Date()}\n            />\n        </div>\n    )\n}\n\nexport const useDatePicker = (initialValue: Date | null) => {\n    const [selected, setSelected] = useState(initialValue)\n\n    const onChange = (date: Date) => {\n        setSelected(date)\n    }\n\n    const clear = () => {\n        setSelected(null)\n    }\n\n    return{\n        selected,\n        onChange,\n        clear\n    }\n}\n","import React from 'react';\r\nimport './Chart.scss';\r\nimport {Button} from '../../components/button'\r\nimport {Input, useInput} from '../../components/input'\r\nimport IChart from '../../models/chart.model'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectFetchingSend, setChartData} from './chartSlice'\r\nimport {DatePickerComponent, useDatePicker} from '../../components/datepicker'\r\n\r\n\r\nexport function ChartForm() {\r\n    const dispatch = useDispatch()\r\n    const fetchingSend = useSelector(selectFetchingSend)\r\n    const minInput = useInput('')\r\n    const avgInput = useInput('')\r\n    const maxInput = useInput('')\r\n    const date = useDatePicker(null)\r\n\r\n    const onSendData = () => {\r\n        const data: IChart.Segment = {\r\n            min: Number(minInput.value),\r\n            avg: Number(avgInput.value),\r\n            max: Number(maxInput.value),\r\n            x: date.selected ? date.selected.toISOString() : new Date().toISOString()\r\n        }\r\n\r\n        dispatch(setChartData(data))\r\n        clearFields()\r\n    }\r\n\r\n    const clearFields = () => {\r\n        minInput.clear()\r\n        avgInput.clear()\r\n        maxInput.clear()\r\n        date.clear()\r\n    }\r\n\r\n    const buttonIsDisabled = !minInput.value || !avgInput.value || !maxInput.value || !date.selected\r\n\r\n    return (\r\n        <form className={'chart-form'}>\r\n            <Input\r\n                colour={'max'}\r\n                name={'Max'}\r\n                type={'number'}\r\n                value={maxInput.value}\r\n                onChange={maxInput.onChange}/>\r\n            <Input\r\n                colour={'avg'}\r\n                name={'Avg'}\r\n                type={'number'}\r\n                value={avgInput.value}\r\n                onChange={avgInput.onChange}/>\r\n            <Input\r\n                colour={'min'}\r\n                name={'Min'}\r\n                type={'number'}\r\n                value={minInput.value}\r\n                onChange={minInput.onChange}/>\r\n            <DatePickerComponent\r\n                name={'Date'}\r\n                selected={date.selected}\r\n                onChange={date.onChange}/>\r\n            <Button\r\n                name={'Send'}\r\n                onClick={onSendData}\r\n                disabled={buttonIsDisabled}\r\n                loading={fetchingSend}/>\r\n        </form>\r\n    );\r\n}\r\n","import React, {useEffect, useRef} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {getChartData, selectChartLines} from './chartSlice';\r\nimport './Chart.scss';\r\nimport * as d3 from 'd3';\r\nimport IChart from '../../models/chart.model'\r\nimport {ChartForm} from './ChartForm'\r\n\r\nexport function Chart() {\r\n  const chartLines = useSelector(selectChartLines);\r\n  const dispatch = useDispatch();\r\n  const d3Container = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getChartData())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (chartLines && d3Container.current) {\r\n\r\n      const dataMin: IChart.Point[] = chartLines.min\r\n      const dataAvg: IChart.Point[] = chartLines.avg\r\n      const dataMax: IChart.Point[] = chartLines.max\r\n\r\n      const width = 800;\r\n      const height = 800;\r\n      const margin = ({top: 20, right: 30, bottom: 30, left: 40})\r\n\r\n      const line = d3.line()\r\n          .defined((d: any) => !isNaN(d.value))\r\n          .x((d: any) => x(new Date(d.date)))\r\n          .y((d: any) => y(d.value))\r\n          .curve(d3.curveCardinal)\r\n\r\n      const x = d3.scaleUtc()\r\n          .domain(d3.extent(dataMin, d => new Date(d.date)) as any)\r\n          .range([margin.left, width - margin.right])\r\n\r\n      const y = d3.scaleLinear()\r\n          .domain([0, d3.max(dataMin, d => d.value)] as any).nice()\r\n          .range([height - margin.bottom, margin.top])\r\n\r\n      const xAxis = (g: any) => g\r\n          .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n          .call(d3.axisBottom(x).ticks(width / 100).tickSizeOuter(0))\r\n\r\n      const yAxis = (g: any) => g\r\n          .attr(\"transform\", `translate(${margin.left},0)`)\r\n          .call(d3.axisLeft(y))\r\n          .call((g: any) => g.select(\".tick:last-of-type text\").clone()\r\n              .attr(\"x\", 3)\r\n              .attr(\"text-anchor\", \"start\")\r\n              .text('Value'))\r\n\r\n\r\n      const svg = d3.select(d3Container.current)\r\n          .attr(\"viewBox\", [0, 0, width, height] as any);\r\n\r\n      svg.select(\".x-axis\").call(xAxis);\r\n\r\n      svg.select(\".y-axis\").call(yAxis);\r\n\r\n      svg.select(\".max-path\")\r\n          .datum(dataMax)\r\n          .transition()\r\n          .duration(300)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#00C853\")\r\n          .attr(\"stroke-width\", 1.5)\r\n          .attr(\"stroke-linejoin\", \"round\")\r\n          .attr(\"stroke-linecap\", \"round\")\r\n          .attr(\"d\", line as any);\r\n\r\n      svg.select(\".avg-path\")\r\n          .datum(dataAvg)\r\n          .transition()\r\n          .duration(300)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#FFD600\")\r\n          .attr(\"stroke-width\", 1.5)\r\n          .attr(\"stroke-linejoin\", \"round\")\r\n          .attr(\"stroke-linecap\", \"round\")\r\n          .attr(\"d\", line as any);\r\n\r\n      svg.select(\".min-path\")\r\n          .datum(dataMin)\r\n          .transition()\r\n          .duration(300)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#D50000\")\r\n          .attr(\"stroke-width\", 1.5)\r\n          .attr(\"stroke-linejoin\", \"round\")\r\n          .attr(\"stroke-linecap\", \"round\")\r\n          .attr(\"d\", line as any);\r\n    }\r\n\r\n  }, [chartLines, d3Container.current])\r\n\r\n  return (\r\n    <div className={'chart-wrapper'}>\r\n      <ChartForm/>\r\n      <svg\r\n          className=\"d3-component\"\r\n          width={800}\r\n          height={800}\r\n          ref={d3Container}\r\n      >\r\n        <g className={\"x-axis\"}/>\r\n        <g className={\"y-axis\"}/>\r\n        <path className={'min-path'}/>\r\n        <path className={'avg-path'}/>\r\n        <path className={'max-path'}/>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {Chart} from './features/chart/Chart'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Chart/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport chartReducer from '../features/chart/chartSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    chart: chartReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}